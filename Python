import sys
import subprocess
import os
import logging
import re
import spacy
from typing import Dict, Optional
from docx.api import Document
from pypdf import PdfReader



class ResumeParser:
    def __init__(self):
        """Initialize the resume parser with NLP model and logging"""
        try:
            self.nlp = spacy.load("en_core_web_sm")
        except OSError:
            logging.error("Please install the spaCy model: python -m spacy download en_core_web_sm")
            raise

        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)

    def find_resume_file(self, directory: str) -> Optional[str]:
        """Find the single PDF or DOCX file in the given directory"""
        files = [f for f in os.listdir(directory) if f.endswith(('.pdf', '.docx'))]
        return os.path.join(directory, files[0]) if files else None

    def read_pdf(self, file_path: str) -> Optional[str]:
        """Extract text from PDF file"""
        try:
            reader = PdfReader(file_path)
            text = "".join([page.extract_text() for page in reader.pages if page.extract_text()])
            return text
        except Exception as e:
            self.logger.error(f"Error reading PDF file: {str(e)}")
            return None

    def read_docx(self, file_path: str) -> Optional[str]:
        """Extract text from DOCX file"""
        try:
            doc = Document(file_path)
            return "\n".join([para.text for para in doc.paragraphs])
        except Exception as e:
            self.logger.error(f"Error reading DOCX file: {str(e)}")
            return None

    def extract_email(self, text: str) -> Optional[str]:
        """Extract email address from text"""
        email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        match = re.search(email_pattern, text)
        return match.group(0) if match else None

    def extract_phone(self, text: str) -> Optional[str]:
        """Extract phone number from text"""
        phone_pattern = r'(\+\d{1,3}[-.]?)?\s*\(?([0-9]{3})\)?[-.]?\s*([0-9]{3})[-.]?\s*([0-9]{4})'
        match = re.search(phone_pattern, text)
        return match.group(0) if match else None

    def extract_skills(self, text: str) -> list:
        """Extract skills using NLP"""
        doc = self.nlp(text)
        common_skills = {"python", "java", "javascript", "sql", "react", "node.js", "docker",
                         "kubernetes", "aws", "azure", "git", "agile", "scrum"}
        return list({token.text.lower() for token in doc if token.text.lower() in common_skills})

    def parse_resume(self, file_path: str) -> Dict:
        """Main method to parse resume and return structured data"""
        self.logger.info(f"Starting to parse resume: {file_path}")
        
        text = None
        if file_path.endswith('.pdf'):
            text = self.read_pdf(file_path)
        elif file_path.endswith('.docx'):
            text = self.read_docx(file_path)
        
        if not text:
            return {"error": "Failed to read resume file"}

        return {
            "email": self.extract_email(text),
            "phone": self.extract_phone(text),
            "skills": self.extract_skills(text),
            "raw_text": text
        }

    def save_to_word(self, data: Dict, output_path: str) -> None:
        """Save parsed resume data to a Word document"""
        doc = Document()
        doc.add_heading('Resume Analysis Report', 0).alignment = 1
        doc.add_heading('Contact Information', level=1)
        if data.get("email"):
            doc.add_paragraph(f'Email: {data["email"]}')
        if data.get("phone"):
            doc.add_paragraph(f'Phone: {data["phone"]}')
        if data.get("skills"):
            doc.add_heading('Skills', level=1)
            doc.add_paragraph(', '.join(data["skills"]))
        if data.get("raw_text"):
            doc.add_heading('Original Resume Text', level=1)
            doc.add_paragraph(data["raw_text"])
        doc.save(output_path)
        self.logger.info(f"Successfully saved Word document to {output_path}")

parser = ResumeParser()
resume_file = parser.find_resume_file('.')
output_file = "parsed_resume.docx"

if resume_file:
    try:
        data = parser.parse_resume(resume_file)
        parser.save_to_word(data, output_file)
        print("Parsed Resume Data:")
        print("==================")
        for key, value in data.items():
            if key != "raw_text":
                print(f"{key.capitalize()}: {value}")
        print(f"\nWord document saved as: {output_file}")
    except Exception as e:
        print(f"Error processing resume: {str(e)}")
else:
    print("No resume file found in the directory.")
